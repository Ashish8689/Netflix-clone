{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setmovies","trailer","settrailer","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","original_name","name","original_title","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","key","id","videoId","opts","height","width","playerVars","autoplay","APIKEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","Banner","setmovie","Math","floor","random","length","style","backgroundImage","backgroundSize","backgroundPosition","overview","Navbar","move","setmove","window","addEventListener","scrollY","process","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.21011728.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React,{useState,useEffect} from 'react';\r\nimport axios from './axios';\r\nimport './App.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n\r\n    const [movies,setmovies] = useState([]);\r\n    const [trailer,settrailer] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n      \r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setmovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    },[fetchUrl]);\r\n\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n            autoplay:1,\r\n        },\r\n    };\r\n\r\n    const handleClick=(movie)=>{\r\n        if(trailer){\r\n            settrailer(\"\");\r\n        }\r\n        else{\r\n            movieTrailer( movie?.original_name || movie?.name || movie?.title || movie?.original_title || \"\")\r\n            .then((url)=>{\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                settrailer(urlParams.get(\"v\"));\r\n            })\r\n            .catch((error)=> console.log(error));\r\n            \r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h1 className=\"row-title\">{title}</h1>\r\n\r\n            <div className=\"row-poster-container\">\r\n           \r\n              {movies.map(movie =>(\r\n               \r\n               <img \r\n                className={`row-poster ${isLargeRow && \"row-poster-large\"}`} \r\n                onClick={()=>handleClick(movie)}\r\n                // src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path ? movie.backdrop_path : movie.poster_path   }`} \r\n                alt={movie.title} \r\n                key={movie.id}/>\r\n              ))}\r\n\r\n            </div>\r\n\r\n            {trailer && <YouTube videoId={trailer} opts={opts} /> }\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","const  APIKEY = \"87a243c8f80b373111e2d0fc865a115d\";\r\n\r\nconst requests = {\r\n\r\n   fetchTrending : `/trending/all/week?api_key=${APIKEY}&language=en-US`,\r\n   fetchNetflixOriginals: `/discover/tv?api_key=${APIKEY}&with_networks=213`,\r\n   fetchTopRated: `/movie/top_rated?api_key=${APIKEY}&language=en-US`,\r\n   fetchActionMovies: `/discover/movie?api_key=${APIKEY}&with_genres=28`,\r\n   fetchComedyMovies: `/discover/movie?api_key=${APIKEY}&with_genres=35`,\r\n   fetchHorrorMovies: `/discover/movie?api_key=${APIKEY}&with_genres=27`,\r\n   fetchRomanceMovies: `/discover/movie?api_key=${APIKEY}&with_genres=10749`,\r\n   fetchActionMovies: `/discover/movie?api_key=${APIKEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React,{useState,useEffect} from 'react';\r\nimport axios from './axios';\r\n\r\nfunction Banner({fetchUrl}) {\r\n\r\n    const [movie,setmovie] = useState([]);\r\n\r\n    useEffect(()=>{\r\n\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n\r\n        setmovie(\r\n            request.data.results[Math.floor(Math.random() * request.data.results.length )]\r\n        );\r\n        return request;\r\n        }\r\n\r\n        fetchData();\r\n    },[]);\r\n\r\n    return (\r\n        <div className=\"banner\"\r\n          style={{\r\n            backgroundImage:`linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.7)),url(\"https://image.tmdb.org/t/p/original/${movie.backdrop_path}\")`,\r\n            backgroundSize:\"cover\",\r\n            backgroundPosition:\"center\"\r\n          }}>\r\n\r\n            <div className=\"banner-content\">\r\n                <h1 className=\"banner-title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n\r\n                <div className=\"banner-button\">\r\n                    <button className=\"button\">Play</button>\r\n                    <button className=\"button\">MyList</button>\r\n                </div>\r\n\r\n                <h2 className=\"banner-description\">{movie.overview}</h2>\r\n            </div>\r\n\r\n            <div className=\"banner-fadebottom\"></div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React,{useState,useEffect} from 'react';\r\nimport './App.css';\r\n\r\nfunction Navbar() {\r\n\r\n    const [move,setmove] = useState();\r\n\r\n    useEffect(()=>{\r\n      window.addEventListener('scroll',()=>{\r\n          if(window.scrollY < 100){\r\n              setmove(false);\r\n          }\r\n          else if(window.scrollY > 100){\r\n              setmove(true);\r\n          }\r\n          else{\r\n              setmove(false);\r\n          }\r\n      })\r\n    },[])\r\n\r\n\r\n    return (\r\n        <div className={`navbar ${move && 'nav-black'}`}>\r\n            <img src={process.env.PUBLIC_URL + '/netflix.png' } className=\"logo\" alt=\"Netflix-logo\"/>\r\n            <img src={process.env.PUBLIC_URL + '/smile.png' } className=\"logo logo-smile\" alt=\"Netflix-logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './request';\nimport Banner from './Banner';\nimport Navbar from './Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n       <Navbar />\n\n       <Banner fetchUrl={requests.fetchNetflixOriginals}/>\n\n       <Row title =\"Netflix-Original\" fetchUrl={requests.fetchNetflixOriginals}  isLargeRow/>\n       <Row title =\"Trending\" fetchUrl={requests.fetchTrending}/>\n       <Row title =\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n       <Row title =\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n       <Row title =\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n       <Row title =\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n       <Row title =\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}